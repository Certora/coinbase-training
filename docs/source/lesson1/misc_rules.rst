Miscellaneous rule types
========================
The examples here are from the spec file :clink:`@ERC20/certora/specs/ERC20Examples.spec`.


.. index::
   single: revert
   single: withrevert

Revert conditions
-----------------
* By default, the Prover ignores computation paths that result in reverts.
* To include these cases, use :cvl:`@withrevert` 
* The results will be stored in the boolean :cvl:`lastReverted`.
* Any other Solidity call will *change* the value of :cvl:`lastReverted`.
* Best practice is to store it immediately, e.g. :cvl:`bool reverted = lastReverted;`.

Wrong revert rule
^^^^^^^^^^^^^^^^^
.. cvlinclude:: @ERC20/certora/specs/ERC20Examples.spec
   :cvlobject: transferRevertsWrong
   :caption: :clink:`transferRevertsWrong<@ERC20/certora/specs/ERC20Examples.spec>`

* This rule is violated, see `transferRevertsWrong report`_
* What is the mistake in the rule?

.. dropdown:: Fixed rule

   .. cvlinclude:: @ERC20/certora/specs/ERC20Examples.spec
      :cvlobject: transferReverts

Missing revert conditions
^^^^^^^^^^^^^^^^^^^^^^^^^
.. cvlinclude:: @ERC20/certora/specs/ERC20Examples.spec
   :cvlobject: transferSucceedsMissing
   :caption: :clink:`transferSucceedsMissing<@ERC20/certora/specs/ERC20Examples.spec>`

* This rule gives counter examples:

  * Counter example `non-zero message value`_
  * Counter example `overflow causing revert`_
* How to fix this rule?

.. dropdown:: Fixed rule

   .. cvlinclude:: @ERC20/certora/specs/ERC20Examples.spec
      :cvlobject: transferSucceeds


.. index::
   single: satisfy

Satisfy rules
-------------
* The :cvl:`satisfy` statement generates positive examples.
* Its syntax is :cvl:`satisfy <boolean condition>;`.
* See `satisfy rules report`_ for the examples generated by the two rules below.

First deposit example
^^^^^^^^^^^^^^^^^^^^^
Shows that the first deposit (minting) is possible.

.. cvlinclude:: @ERC20/certora/specs/ERC20Examples.spec
   :cvlobject: satisfyFirstDepositSucceeds

Last withdraw example
^^^^^^^^^^^^^^^^^^^^^
Shows that it is possible to withdraw the last remaining tokens.

.. cvlinclude:: @ERC20/certora/specs/ERC20Examples.spec
   :cvlobject: satisfyLastWithdrawSucceeds


Relational properties
---------------------
* The following example shows that when transferring an amount from *sender*
  to *recipient*, the sum of their balances remains the same.
* Note the use of the :cvl:`mathint` type, this is explained in
  :ref:`integer_types_in_cvl` below.
* Report: `relational rule report`_.

.. cvlinclude:: @ERC20/certora/specs/ERC20Examples.spec
   :cvlobject: sumBalancesConstant


.. index::
   single: mathint
   single: type; mathint
   single: integer; casting
   :name: integer_types_in_cvl

Detour - integer types in CVL
-----------------------------
CVL supports all integer types that are available in solidity, such as :cvl:`uint8`.
In addition, CVL has the *mathematical integer* type: :cvl:`mathint`. These types
obey the following two rules:

#. All arithmetic operations (i.e. :cvl:`+`, :cvl:`-`, :cvl:`*`, :cvl:`/`, and :cvl:`%`)
   return :cvl:`mathint` type
#. When using comparison operators, such as: :cvl:`==`, and :cvl:`<=`, on integer types
   both sides *must have the same type*

These rules mean that sometimes you will need to cast a solidity integer type to a
:cvl:`mathint` and vice versa. To cast an integer into :cvl:`mathint` use the function
:cvl:`to_mathint`. To cast :cvl:`mathint x` to a solidity integer type, say
:cvl:`uint128`, there are two possible functions:

* :cvl:`require_uint128(x)` - in this case the Prover will ignore all cases where
  there is *overflow* (i.e. :cvl:`x > max_uint128`) or *underflow* (i.e. :cvl:`x < 0`)
* :cvl:`assert_uint128(x)` - in this case an overflow or an underflow will cause a
  violation

.. Links
   -----

.. _transferRevertsWrong report:
   https://prover.certora.com/output/98279/1832974837c347448e6978608d8c0706?anonymousKey=1cddfa5042c406c27a3041eed59b0db5b70c7b9a

.. _non-zero message value:
   https://prover.certora.com/output/98279/99cbfc2c64934085b0674e3f93e12dad?anonymousKey=24a9be82c7b17abb06289ec31c1551a2cd001085

.. _overflow causing revert:
   https://prover.certora.com/output/98279/285efd7361fc493aba479609206e4fa7?anonymousKey=b2d49e619c0db22cb0a0158635a69562ba548001

.. _satisfy rules report:
   https://prover.certora.com/output/98279/833ee0be933642cfada0a3a50cb5d89f?anonymousKey=c4d394aac617be626628ab70a7fbbdc3ee6e72c3

.. _relational rule report:
   https://prover.certora.com/output/98279/275ab3a764f94af486817b8f9992bfc4?anonymousKey=7b155fe7e6081c0f139bee4634721e00374c547f
